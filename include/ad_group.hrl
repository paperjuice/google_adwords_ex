
%% generated by soap from: /Users/dragosdumitru/Work/google-multi/priv/ad_group.wsdl
%% for service "AdGroupService" and port "AdGroupServiceInterfacePort"
%% using options: [{service,"AdGroupService"},{port,"AdGroupServiceInterfacePort"},{generate,client},{namespaces,[{"https://adwords.google.com/api/adwords/cm/v201809",undefined}]},{generate_tests,none},{http_client,soap_client_inets},{client_name,"ad_group_service_client"},{strict,true}]

%%% This file contains record and type decarations that are used by the WSDL.
%%%
%%% It also contains a macro 'INTERFACE' that is used to make information
%%% about the WSDL available to the SOAP implementation.
%%%
%%% It is possible (and in some cases necessary) to change the name of the
%%% record fields.
%%%
%%% It is possible to add default values, but be aware that these will only
%%% be used when *writing* an xml document.

%%% Records used to represent fault response messages:

-record(faultdetail, {uri :: string(),
                      tag :: string(),
                      text :: string()}).

-record(faultcode, {uri :: string(),
                    code :: string(),
                    subcode :: #faultcode{} % only v. 1.2
                   }).

-record(faultreason, {text :: string(),
                      language :: string()}).

-record(soap_fault_1_1, {faultcode :: #faultcode{},
                         faultstring :: string(),
                         faultactor :: string(),
                         detail :: [#faultdetail{}]}).

-record(soap_fault_1_2, {code :: #faultcode{},
                         reason :: [#faultreason{}],
                         role :: string(),
                         detail :: [#faultdetail{}]}).

%% xsd:QName values are translated to #qname{} records.
-record(qname, {uri :: string(),
                localPart :: string(),
                prefix :: string(),
                mappedPrefix :: string()}).



-record(queryResponse, {
	rval :: 'AdGroupPage'() | undefined}).

-type queryResponse() :: #queryResponse{}.


-record(query, {
	query :: string() | undefined}).

-type query() :: #query{}.


-record(mutateLabelResponse, {
	rval :: 'AdGroupLabelReturnValue'() | undefined}).

-type mutateLabelResponse() :: #mutateLabelResponse{}.


-record(mutateLabel, {
	operations :: ['AdGroupLabelOperation'()] | undefined}).

-type mutateLabel() :: #mutateLabel{}.


-record(mutateResponse, {
	rval :: 'AdGroupReturnValue'() | undefined}).

-type mutateResponse() :: #mutateResponse{}.


-record(mutate, {
	operations :: ['AdGroupOperation'()] | undefined}).

-type mutate() :: #mutate{}.


-record(getResponse, {
	rval :: 'AdGroupPage'() | undefined}).

-type getResponse() :: #getResponse{}.


-record(get, {
	serviceSelector :: 'Selector'() | undefined}).

-type get() :: #get{}.


-record('UrlError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'UrlError'() :: #'UrlError'{}.


-record('TargetingSetting', {
	'Setting.Type' :: string() | undefined,
	details :: ['TargetingSettingDetail'()] | undefined}).

-type 'TargetingSetting'() :: #'TargetingSetting'{}.


-record('TargetSpendBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	bidCeiling :: 'Money'() | undefined,
	spendTarget :: 'Money'() | undefined}).

-type 'TargetSpendBiddingScheme'() :: #'TargetSpendBiddingScheme'{}.


-record('TargetRoasBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	targetRoas :: string() | undefined,
	bidCeiling :: 'Money'() | undefined,
	bidFloor :: 'Money'() | undefined}).

-type 'TargetRoasBiddingScheme'() :: #'TargetRoasBiddingScheme'{}.


-record('TargetingSettingDetail', {
	criterionTypeGroup :: string() | undefined,
	targetAll :: boolean() | undefined}).

-type 'TargetingSettingDetail'() :: #'TargetingSettingDetail'{}.


-record('TargetOutrankShareBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	targetOutrankShare :: integer() | undefined,
	competitorDomain :: string() | undefined,
	maxCpcBidCeiling :: 'Money'() | undefined,
	bidChangesForRaisesOnly :: boolean() | undefined,
	raiseBidWhenLowQualityScore :: boolean() | undefined}).

-type 'TargetOutrankShareBiddingScheme'() :: #'TargetOutrankShareBiddingScheme'{}.


-record('TargetCpaBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	targetCpa :: 'Money'() | undefined,
	maxCpcBidCeiling :: 'Money'() | undefined,
	maxCpcBidFloor :: 'Money'() | undefined}).

-type 'TargetCpaBiddingScheme'() :: #'TargetCpaBiddingScheme'{}.


-record('String_StringMapEntry', {
	key :: string() | undefined,
	value :: string() | undefined}).

-type 'String_StringMapEntry'() :: #'String_StringMapEntry'{}.


-record('StringLengthError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'StringLengthError'() :: #'StringLengthError'{}.


-record('StringFormatError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'StringFormatError'() :: #'StringFormatError'{}.


-record('StatsQueryError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'StatsQueryError'() :: #'StatsQueryError'{}.


-record('SoapResponseHeader', {
	requestId :: string() | undefined,
	serviceName :: string() | undefined,
	methodName :: string() | undefined,
	operations :: string() | undefined,
	responseTime :: string() | undefined}).

-type 'SoapResponseHeader'() :: #'SoapResponseHeader'{}.


-record('SoapHeader', {
	clientCustomerId :: string() | undefined,
	developerToken :: string() | undefined,
	userAgent :: string() | undefined,
	validateOnly :: boolean() | undefined,
	partialFailure :: boolean() | undefined}).

-type 'SoapHeader'() :: #'SoapHeader'{}.


-record('SizeLimitError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'SizeLimitError'() :: #'SizeLimitError'{}.


-record('SettingError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'SettingError'() :: #'SettingError'{}.


-record('Setting', {
	'Setting.Type' :: string() | undefined}).

-type 'Setting'() :: #'Setting'{}.


-record('SelectorError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'SelectorError'() :: #'SelectorError'{}.


-record('Selector', {
	fields :: [string()] | undefined,
	predicates :: ['Predicate'()] | undefined,
	dateRange :: 'DateRange'() | undefined,
	ordering :: ['OrderBy'()] | undefined,
	paging :: 'Paging'() | undefined}).

-type 'Selector'() :: #'Selector'{}.


-record('RequiredError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'RequiredError'() :: #'RequiredError'{}.


-record('RequestError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'RequestError'() :: #'RequestError'{}.


-record('RejectedError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'RejectedError'() :: #'RejectedError'{}.


-record('ReadOnlyError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'ReadOnlyError'() :: #'ReadOnlyError'{}.


-record('RateExceededError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined,
	rateName :: string() | undefined,
	rateScope :: string() | undefined,
	retryAfterSeconds :: integer() | undefined}).

-type 'RateExceededError'() :: #'RateExceededError'{}.


-record('RangeError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'RangeError'() :: #'RangeError'{}.


-record('QuotaCheckError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'QuotaCheckError'() :: #'QuotaCheckError'{}.


-record('QueryError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined,
	message :: string() | undefined}).

-type 'QueryError'() :: #'QueryError'{}.


-record('Predicate', {
	field :: string() | undefined,
	operator :: string() | undefined,
	values :: [string()] | undefined}).

-type 'Predicate'() :: #'Predicate'{}.


-record('Paging', {
	startIndex :: integer() | undefined,
	numberResults :: integer() | undefined}).

-type 'Paging'() :: #'Paging'{}.


-record('PageOnePromotedBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	strategyGoal :: string() | undefined,
	bidCeiling :: 'Money'() | undefined,
	bidModifier :: string() | undefined,
	bidChangesForRaisesOnly :: boolean() | undefined,
	raiseBidWhenBudgetConstrained :: boolean() | undefined,
	raiseBidWhenLowQualityScore :: boolean() | undefined}).

-type 'PageOnePromotedBiddingScheme'() :: #'PageOnePromotedBiddingScheme'{}.


-record('Page', {
	totalNumEntries :: integer() | undefined,
	'Page.Type' :: string() | undefined}).

-type 'Page'() :: #'Page'{}.


-record('OrderBy', {
	field :: string() | undefined,
	sortOrder :: string() | undefined}).

-type 'OrderBy'() :: #'OrderBy'{}.


-record('OperatorError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'OperatorError'() :: #'OperatorError'{}.


-record('OperationAccessDenied', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'OperationAccessDenied'() :: #'OperationAccessDenied'{}.


-record('Operation', {
	operator :: string() | undefined,
	'Operation.Type' :: string() | undefined}).

-type 'Operation'() :: #'Operation'{}.


-record('NumberValue', {
	'ComparableValue.Type' :: string() | undefined}).

-type 'NumberValue'() :: #'NumberValue'{}.


-record('NullError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'NullError'() :: #'NullError'{}.


-record('NotEmptyError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'NotEmptyError'() :: #'NotEmptyError'{}.


-record('NewEntityCreationError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'NewEntityCreationError'() :: #'NewEntityCreationError'{}.


-record('MultiplierError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'MultiplierError'() :: #'MultiplierError'{}.


-record('Money', {
	'ComparableValue.Type' :: string() | undefined,
	microAmount :: string() | undefined}).

-type 'Money'() :: #'Money'{}.


-record('MaximizeConversionsBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined}).

-type 'MaximizeConversionsBiddingScheme'() :: #'MaximizeConversionsBiddingScheme'{}.


-record('MaximizeConversionValueBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	targetRoas :: string() | undefined}).

-type 'MaximizeConversionValueBiddingScheme'() :: #'MaximizeConversionValueBiddingScheme'{}.


-record('ManualCpmBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	viewableCpmEnabled :: boolean() | undefined}).

-type 'ManualCpmBiddingScheme'() :: #'ManualCpmBiddingScheme'{}.


-record('ManualCpcBiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined,
	enhancedCpcEnabled :: boolean() | undefined}).

-type 'ManualCpcBiddingScheme'() :: #'ManualCpcBiddingScheme'{}.


-record('LongValue', {
	'ComparableValue.Type' :: string() | undefined,
	number :: string() | undefined}).

-type 'LongValue'() :: #'LongValue'{}.


-record('ListReturnValue', {
	'ListReturnValue.Type' :: string() | undefined}).

-type 'ListReturnValue'() :: #'ListReturnValue'{}.


-record('Label', {
	id :: string() | undefined,
	name :: string() | undefined,
	status :: string() | undefined,
	attribute :: 'LabelAttribute'() | 'DisplayAttribute'() | undefined,
	'Label.Type' :: string() | undefined}).

-type 'Label'() :: #'Label'{}.


-record('InternalApiError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'InternalApiError'() :: #'InternalApiError'{}.


-record('IdError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'IdError'() :: #'IdError'{}.


-record('ForwardCompatibilityError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'ForwardCompatibilityError'() :: #'ForwardCompatibilityError'{}.


-record('FieldPathElement', {
	field :: string() | undefined,
	index :: integer() | undefined}).

-type 'FieldPathElement'() :: #'FieldPathElement'{}.


-record('ExplorerAutoOptimizerSetting', {
	'Setting.Type' :: string() | undefined,
	optIn :: boolean() | undefined}).

-type 'ExplorerAutoOptimizerSetting'() :: #'ExplorerAutoOptimizerSetting'{}.


-record('EntityNotFound', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'EntityNotFound'() :: #'EntityNotFound'{}.


-record('EntityCountLimitExceeded', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined,
	enclosingId :: string() | undefined,
	limit :: integer() | undefined,
	accountLimitType :: string() | undefined,
	existingCount :: integer() | undefined}).

-type 'EntityCountLimitExceeded'() :: #'EntityCountLimitExceeded'{}.


-record('EntityAccessDenied', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'EntityAccessDenied'() :: #'EntityAccessDenied'{}.


-record('DoubleValue', {
	'ComparableValue.Type' :: string() | undefined,
	number :: string() | undefined}).

-type 'DoubleValue'() :: #'DoubleValue'{}.


-record('DistinctError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'DistinctError'() :: #'DistinctError'{}.


-record('DateRange', {
	min :: string() | undefined,
	max :: string() | undefined}).

-type 'DateRange'() :: #'DateRange'{}.


-record('DateError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'DateError'() :: #'DateError'{}.


-record('DatabaseError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'DatabaseError'() :: #'DatabaseError'{}.


-record('CustomParameters', {
	parameters :: ['CustomParameter'()] | undefined,
	doReplace :: boolean() | undefined}).

-type 'CustomParameters'() :: #'CustomParameters'{}.


-record('CustomParameter', {
	key :: string() | undefined,
	value :: string() | undefined,
	isRemove :: boolean() | undefined}).

-type 'CustomParameter'() :: #'CustomParameter'{}.


-record('CpmBid', {
	'Bids.Type' :: string() | undefined,
	bid :: 'Money'() | undefined,
	cpmBidSource :: string() | undefined}).

-type 'CpmBid'() :: #'CpmBid'{}.


-record('CpcBid', {
	'Bids.Type' :: string() | undefined,
	bid :: 'Money'() | undefined,
	cpcBidSource :: string() | undefined}).

-type 'CpcBid'() :: #'CpcBid'{}.


-record('CpaBid', {
	'Bids.Type' :: string() | undefined,
	bid :: 'Money'() | undefined,
	bidSource :: string() | undefined}).

-type 'CpaBid'() :: #'CpaBid'{}.


-record('ComparableValue', {
	'ComparableValue.Type' :: string() | undefined}).

-type 'ComparableValue'() :: #'ComparableValue'{}.


-record('ClientTermsError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'ClientTermsError'() :: #'ClientTermsError'{}.


-record('DisplayAttribute', {
	'LabelAttribute.Type' :: string() | undefined,
	backgroundColor :: string() | undefined,
	description :: string() | undefined}).

-type 'DisplayAttribute'() :: #'DisplayAttribute'{}.


-record('TextLabel', {
	id :: string() | undefined,
	name :: string() | undefined,
	status :: string() | undefined,
	attribute :: 'LabelAttribute'() | 'DisplayAttribute'() | undefined,
	'Label.Type' :: string() | undefined}).

-type 'TextLabel'() :: #'TextLabel'{}.


-record('Bids', {
	'Bids.Type' :: string() | undefined}).

-type 'Bids'() :: #'Bids'{}.


-record('BiddingStrategyConfiguration', {
	biddingStrategyId :: string() | undefined,
	biddingStrategyName :: string() | undefined,
	biddingStrategyType :: string() | undefined,
	biddingStrategySource :: string() | undefined,
	biddingScheme :: 'BiddingScheme'() | 'TargetSpendBiddingScheme'() | 'TargetRoasBiddingScheme'() | 'TargetOutrankShareBiddingScheme'() | 'TargetCpaBiddingScheme'() | 'PageOnePromotedBiddingScheme'() | 'MaximizeConversionsBiddingScheme'() | 'MaximizeConversionValueBiddingScheme'() | 'ManualCpmBiddingScheme'() | 'ManualCpcBiddingScheme'() | undefined,
	bids :: ['Bids'() | 'CpmBid'() | 'CpcBid'() | 'CpaBid'()] | undefined,
	targetRoasOverride :: string() | undefined}).

-type 'BiddingStrategyConfiguration'() :: #'BiddingStrategyConfiguration'{}.


-record('BiddingScheme', {
	'BiddingScheme.Type' :: string() | undefined}).

-type 'BiddingScheme'() :: #'BiddingScheme'{}.


-record('BiddingErrors', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'BiddingErrors'() :: #'BiddingErrors'{}.


-record('AuthorizationError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'AuthorizationError'() :: #'AuthorizationError'{}.


-record('AuthenticationError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'AuthenticationError'() :: #'AuthenticationError'{}.


-record('LabelAttribute', {
	'LabelAttribute.Type' :: string() | undefined}).

-type 'LabelAttribute'() :: #'LabelAttribute'{}.


-record('ApplicationException', {
	message :: string() | undefined,
	'ApplicationException.Type' :: string() | undefined}).

-type 'ApplicationException'() :: #'ApplicationException'{}.


-record('ApiException', {
	message :: string() | undefined,
	'ApplicationException.Type' :: string() | undefined,
	errors :: ['ApiError'() | 'UrlError'() | 'StringLengthError'() | 'StringFormatError'() | 'StatsQueryError'() | 'SizeLimitError'() | 'SettingError'() | 'SelectorError'() | 'RequiredError'() | 'RequestError'() | 'RejectedError'() | 'ReadOnlyError'() | 'RateExceededError'() | 'RangeError'() | 'QuotaCheckError'() | 'QueryError'() | 'OperatorError'() | 'OperationAccessDenied'() | 'NullError'() | 'NotEmptyError'() | 'NewEntityCreationError'() | 'MultiplierError'() | 'InternalApiError'() | 'IdError'() | 'ForwardCompatibilityError'() | 'EntityNotFound'() | 'EntityCountLimitExceeded'() | 'EntityAccessDenied'() | 'DistinctError'() | 'DateError'() | 'DatabaseError'() | 'ClientTermsError'() | 'BiddingErrors'() | 'AuthorizationError'() | 'AuthenticationError'() | 'AdxError'() | 'AdGroupServiceError'()] | undefined}).

-type 'ApiException'() :: #'ApiException'{}.


-record('ApiError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined}).

-type 'ApiError'() :: #'ApiError'{}.


-record('AdxError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'AdxError'() :: #'AdxError'{}.


-record('AdGroupServiceError', {
	fieldPath :: string() | undefined,
	fieldPathElements :: ['FieldPathElement'()] | undefined,
	trigger :: string() | undefined,
	errorString :: string() | undefined,
	'ApiError.Type' :: string() | undefined,
	reason :: string() | undefined}).

-type 'AdGroupServiceError'() :: #'AdGroupServiceError'{}.


-record('AdGroupReturnValue', {
	'ListReturnValue.Type' :: string() | undefined,
	value :: ['AdGroup'()] | undefined,
	partialFailureErrors :: ['ApiError'() | 'UrlError'() | 'StringLengthError'() | 'StringFormatError'() | 'StatsQueryError'() | 'SizeLimitError'() | 'SettingError'() | 'SelectorError'() | 'RequiredError'() | 'RequestError'() | 'RejectedError'() | 'ReadOnlyError'() | 'RateExceededError'() | 'RangeError'() | 'QuotaCheckError'() | 'QueryError'() | 'OperatorError'() | 'OperationAccessDenied'() | 'NullError'() | 'NotEmptyError'() | 'NewEntityCreationError'() | 'MultiplierError'() | 'InternalApiError'() | 'IdError'() | 'ForwardCompatibilityError'() | 'EntityNotFound'() | 'EntityCountLimitExceeded'() | 'EntityAccessDenied'() | 'DistinctError'() | 'DateError'() | 'DatabaseError'() | 'ClientTermsError'() | 'BiddingErrors'() | 'AuthorizationError'() | 'AuthenticationError'() | 'AdxError'() | 'AdGroupServiceError'()] | undefined}).

-type 'AdGroupReturnValue'() :: #'AdGroupReturnValue'{}.


-record('AdGroupPage', {
	totalNumEntries :: integer() | undefined,
	'Page.Type' :: string() | undefined,
	entries :: ['AdGroup'()] | undefined}).

-type 'AdGroupPage'() :: #'AdGroupPage'{}.


-record('AdGroupOperation', {
	operator :: string() | undefined,
	'Operation.Type' :: string() | undefined,
	operand :: 'AdGroup'() | undefined}).

-type 'AdGroupOperation'() :: #'AdGroupOperation'{}.


-record('AdGroupLabelReturnValue', {
	'ListReturnValue.Type' :: string() | undefined,
	value :: ['AdGroupLabel'()] | undefined,
	partialFailureErrors :: ['ApiError'() | 'UrlError'() | 'StringLengthError'() | 'StringFormatError'() | 'StatsQueryError'() | 'SizeLimitError'() | 'SettingError'() | 'SelectorError'() | 'RequiredError'() | 'RequestError'() | 'RejectedError'() | 'ReadOnlyError'() | 'RateExceededError'() | 'RangeError'() | 'QuotaCheckError'() | 'QueryError'() | 'OperatorError'() | 'OperationAccessDenied'() | 'NullError'() | 'NotEmptyError'() | 'NewEntityCreationError'() | 'MultiplierError'() | 'InternalApiError'() | 'IdError'() | 'ForwardCompatibilityError'() | 'EntityNotFound'() | 'EntityCountLimitExceeded'() | 'EntityAccessDenied'() | 'DistinctError'() | 'DateError'() | 'DatabaseError'() | 'ClientTermsError'() | 'BiddingErrors'() | 'AuthorizationError'() | 'AuthenticationError'() | 'AdxError'() | 'AdGroupServiceError'()] | undefined}).

-type 'AdGroupLabelReturnValue'() :: #'AdGroupLabelReturnValue'{}.


-record('AdGroupLabelOperation', {
	operator :: string() | undefined,
	'Operation.Type' :: string() | undefined,
	operand :: 'AdGroupLabel'() | undefined}).

-type 'AdGroupLabelOperation'() :: #'AdGroupLabelOperation'{}.


-record('AdGroupLabel', {
	adGroupId :: string() | undefined,
	labelId :: string() | undefined}).

-type 'AdGroupLabel'() :: #'AdGroupLabel'{}.


-record('AdGroupAdRotationMode', {
	adRotationMode :: string() | undefined}).

-type 'AdGroupAdRotationMode'() :: #'AdGroupAdRotationMode'{}.


-record('AdGroup', {
	id :: string() | undefined,
	campaignId :: string() | undefined,
	campaignName :: string() | undefined,
	name :: string() | undefined,
	status :: string() | undefined,
	settings :: ['Setting'() | 'TargetingSetting'() | 'ExplorerAutoOptimizerSetting'()] | undefined,
	labels :: ['Label'() | 'TextLabel'()] | undefined,
	forwardCompatibilityMap :: ['String_StringMapEntry'()] | undefined,
	biddingStrategyConfiguration :: 'BiddingStrategyConfiguration'() | undefined,
	contentBidCriterionTypeGroup :: string() | undefined,
	baseCampaignId :: string() | undefined,
	baseAdGroupId :: string() | undefined,
	trackingUrlTemplate :: string() | undefined,
	finalUrlSuffix :: string() | undefined,
	urlCustomParameters :: 'CustomParameters'() | undefined,
	adGroupType :: string() | undefined,
	adGroupAdRotationMode :: 'AdGroupAdRotationMode'() | undefined}).

-type 'AdGroup'() :: #'AdGroup'{}.
-define(INTERFACE, {interface,"AdGroupService",ad_group,'1.1',
                    soap_client_inets,soap_server_cowboy_1,undefined,
                    ad_group_service_client,[],
                    "https://adwords.google.com/api/adwords/cm/v201809",
                    "http://schemas.xmlsoap.org/soap/envelope/","document",
                    undefined,
                    "https://adwords.google.com/api/adwords/cm/v201809/AdGroupService",
                    "AdGroupServiceInterfacePort","AdGroupServiceSoapBinding",
                    "AdGroupServiceInterface",
                    [{op,"get",get,[],undefined,request_response,get,
                      getResponse,undefined},
                     {op,"mutate",mutate,[],undefined,request_response,
                      mutate,mutateResponse,undefined},
                     {op,"mutateLabel",mutateLabel,[],undefined,
                      request_response,mutateLabel,mutateLabelResponse,
                      undefined},
                     {op,"query",query,[],undefined,request_response,query,
                      queryResponse,undefined}],
                    {model,
                     [{type,'_document',sequence,
                       [{el,
                         [{alt,get,get,[],1,1,true,undefined},
                          {alt,getResponse,getResponse,[],1,1,true,undefined},
                          {alt,'ApiExceptionFault','ApiException',[],1,1,
                           true,undefined},
                          {alt,mutate,mutate,[],1,1,true,undefined},
                          {alt,mutateResponse,mutateResponse,[],1,1,true,
                           undefined},
                          {alt,mutateLabel,mutateLabel,[],1,1,true,undefined},
                          {alt,mutateLabelResponse,mutateLabelResponse,[],1,
                           1,true,undefined},
                          {alt,query,query,[],1,1,true,undefined},
                          {alt,queryResponse,queryResponse,[],1,1,true,
                           undefined},
                          {alt,'RequestHeader','SoapHeader',[],1,1,true,
                           undefined},
                          {alt,'ResponseHeader','SoapResponseHeader',[],1,1,
                           true,undefined}],
                         1,1,undefined,2}],
                       [],undefined,undefined,1,1,1,false,undefined},
                      {type,queryResponse,sequence,
                       [{el,
                         [{alt,rval,'AdGroupPage',[],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,query,sequence,
                       [{el,
                         [{alt,query,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,mutateLabelResponse,sequence,
                       [{el,
                         [{alt,rval,'AdGroupLabelReturnValue',[],1,1,true,
                           undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,mutateLabel,sequence,
                       [{el,
                         [{alt,operations,'AdGroupLabelOperation',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,mutateResponse,sequence,
                       [{el,
                         [{alt,rval,'AdGroupReturnValue',[],1,1,true,
                           undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,mutate,sequence,
                       [{el,
                         [{alt,operations,'AdGroupOperation',[],1,1,true,
                           undefined}],
                         0,unbound,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,getResponse,sequence,
                       [{el,
                         [{alt,rval,'AdGroupPage',[],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,get,sequence,
                       [{el,
                         [{alt,serviceSelector,'Selector',[],1,1,true,
                           undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'UrlError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'UrlError'},
                      {type,'TargetingSetting',sequence,
                       [{el,
                         [{alt,'Setting.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,details,'TargetingSettingDetail',[],1,1,true,
                           undefined}],
                         0,unbound,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,
                       'TargetingSetting'},
                      {type,'TargetSpendBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,bidCeiling,'Money',[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,spendTarget,'Money',[],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'TargetSpendBiddingScheme'},
                      {type,'TargetRoasBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,targetRoas,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,bidCeiling,'Money',[],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,bidFloor,'Money',[],1,1,true,undefined}],
                         0,1,undefined,5}],
                       [],undefined,undefined,5,1,1,undefined,
                       'TargetRoasBiddingScheme'},
                      {type,'TargetingSettingDetail',sequence,
                       [{el,
                         [{alt,criterionTypeGroup,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,targetAll,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'TargetOutrankShareBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,targetOutrankShare,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,competitorDomain,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,maxCpcBidCeiling,'Money',[],1,1,true,
                           undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,bidChangesForRaisesOnly,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,raiseBidWhenLowQualityScore,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'TargetOutrankShareBiddingScheme'},
                      {type,'TargetCpaBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,targetCpa,'Money',[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,maxCpcBidCeiling,'Money',[],1,1,true,
                           undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,maxCpcBidFloor,'Money',[],1,1,true,undefined}],
                         0,1,undefined,5}],
                       [],undefined,undefined,5,1,1,undefined,
                       'TargetCpaBiddingScheme'},
                      {type,'String_StringMapEntry',sequence,
                       [{el,
                         [{alt,key,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,value,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'StringLengthError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'StringLengthError'},
                      {type,'StringFormatError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'StringFormatError'},
                      {type,'StatsQueryError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'StatsQueryError'},
                      {type,'SoapResponseHeader',sequence,
                       [{el,
                         [{alt,requestId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,serviceName,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,methodName,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,operations,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,responseTime,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,undefined},
                      {type,'SoapHeader',sequence,
                       [{el,
                         [{alt,clientCustomerId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,developerToken,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,userAgent,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,validateOnly,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,partialFailure,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,undefined},
                      {type,'SizeLimitError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'SizeLimitError'},
                      {type,'SettingError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'SettingError'},
                      {type,'Setting',sequence,
                       [{el,
                         [{alt,'Setting.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'SelectorError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'SelectorError'},
                      {type,'Selector',sequence,
                       [{el,
                         [{alt,fields,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,unbound,undefined,2},
                        {el,
                         [{alt,predicates,'Predicate',[],1,1,true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,dateRange,'DateRange',[],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,ordering,'OrderBy',[],1,1,true,undefined}],
                         0,unbound,undefined,5},
                        {el,
                         [{alt,paging,'Paging',[],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,undefined},
                      {type,'RequiredError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'RequiredError'},
                      {type,'RequestError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'RequestError'},
                      {type,'RejectedError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'RejectedError'},
                      {type,'ReadOnlyError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'ReadOnlyError'},
                      {type,'RateExceededError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7},
                        {el,
                         [{alt,rateName,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,8},
                        {el,
                         [{alt,rateScope,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,9},
                        {el,
                         [{alt,retryAfterSeconds,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,10}],
                       [],undefined,undefined,10,1,1,undefined,
                       'RateExceededError'},
                      {type,'RangeError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'RangeError'},
                      {type,'QuotaCheckError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'QuotaCheckError'},
                      {type,'QueryError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7},
                        {el,
                         [{alt,message,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,8}],
                       [],undefined,undefined,8,1,1,undefined,'QueryError'},
                      {type,'Predicate',sequence,
                       [{el,
                         [{alt,field,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,operator,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,values,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,unbound,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,undefined},
                      {type,'Paging',sequence,
                       [{el,
                         [{alt,startIndex,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,numberResults,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'PageOnePromotedBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,strategyGoal,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,bidCeiling,'Money',[],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,bidModifier,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,bidChangesForRaisesOnly,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,raiseBidWhenBudgetConstrained,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,7},
                        {el,
                         [{alt,raiseBidWhenLowQualityScore,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,8}],
                       [],undefined,undefined,8,1,1,undefined,
                       'PageOnePromotedBiddingScheme'},
                      {type,'Page',sequence,
                       [{el,
                         [{alt,totalNumEntries,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'Page.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'OrderBy',sequence,
                       [{el,
                         [{alt,field,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,sortOrder,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'OperatorError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'OperatorError'},
                      {type,'OperationAccessDenied',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'OperationAccessDenied'},
                      {type,'Operation',sequence,
                       [{el,
                         [{alt,operator,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'Operation.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'NumberValue',sequence,
                       [{el,
                         [{alt,'ComparableValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,'NumberValue'},
                      {type,'NullError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'NullError'},
                      {type,'NotEmptyError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'NotEmptyError'},
                      {type,'NewEntityCreationError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'NewEntityCreationError'},
                      {type,'MultiplierError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'MultiplierError'},
                      {type,'Money',sequence,
                       [{el,
                         [{alt,'ComparableValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,microAmount,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,'Money'},
                      {type,'MaximizeConversionsBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,
                       'MaximizeConversionsBiddingScheme'},
                      {type,'MaximizeConversionValueBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,targetRoas,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,
                       'MaximizeConversionValueBiddingScheme'},
                      {type,'ManualCpmBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,viewableCpmEnabled,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,
                       'ManualCpmBiddingScheme'},
                      {type,'ManualCpcBiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,enhancedCpcEnabled,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,
                       'ManualCpcBiddingScheme'},
                      {type,'LongValue',sequence,
                       [{el,
                         [{alt,'ComparableValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,number,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,'LongValue'},
                      {type,'ListReturnValue',sequence,
                       [{el,
                         [{alt,'ListReturnValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'Label',sequence,
                       [{el,
                         [{alt,id,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,name,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,status,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,attribute,'LabelAttribute',[],1,1,true,
                           undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'Label.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,undefined},
                      {type,'InternalApiError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'InternalApiError'},
                      {type,'IdError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'IdError'},
                      {type,'ForwardCompatibilityError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'ForwardCompatibilityError'},
                      {type,'FieldPathElement',sequence,
                       [{el,
                         [{alt,field,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,index,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'ExplorerAutoOptimizerSetting',sequence,
                       [{el,
                         [{alt,'Setting.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,optIn,{'#PCDATA',bool},[],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,
                       'ExplorerAutoOptimizerSetting'},
                      {type,'EntityNotFound',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'EntityNotFound'},
                      {type,'EntityCountLimitExceeded',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7},
                        {el,
                         [{alt,enclosingId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,8},
                        {el,
                         [{alt,limit,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,9},
                        {el,
                         [{alt,accountLimitType,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,10},
                        {el,
                         [{alt,existingCount,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,11}],
                       [],undefined,undefined,11,1,1,undefined,
                       'EntityCountLimitExceeded'},
                      {type,'EntityAccessDenied',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'EntityAccessDenied'},
                      {type,'DoubleValue',sequence,
                       [{el,
                         [{alt,'ComparableValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,number,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,'DoubleValue'},
                      {type,'DistinctError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'DistinctError'},
                      {type,'DateRange',sequence,
                       [{el,
                         [{alt,min,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,max,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'DateError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'DateError'},
                      {type,'DatabaseError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'DatabaseError'},
                      {type,'CustomParameters',sequence,
                       [{el,
                         [{alt,parameters,'CustomParameter',[],1,1,true,
                           undefined}],
                         0,unbound,undefined,2},
                        {el,
                         [{alt,doReplace,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'CustomParameter',sequence,
                       [{el,
                         [{alt,key,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,value,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,isRemove,
                           {'#PCDATA',bool},
                           [],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,undefined},
                      {type,'CpmBid',sequence,
                       [{el,
                         [{alt,'Bids.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,bid,'Money',[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,cpmBidSource,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,'CpmBid'},
                      {type,'CpcBid',sequence,
                       [{el,
                         [{alt,'Bids.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,bid,'Money',[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,cpcBidSource,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,'CpcBid'},
                      {type,'CpaBid',sequence,
                       [{el,
                         [{alt,'Bids.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,bid,'Money',[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,bidSource,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,'CpaBid'},
                      {type,'ComparableValue',sequence,
                       [{el,
                         [{alt,'ComparableValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'ClientTermsError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'ClientTermsError'},
                      {type,'DisplayAttribute',sequence,
                       [{el,
                         [{alt,'LabelAttribute.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,backgroundColor,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,description,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'DisplayAttribute'},
                      {type,'TextLabel',sequence,
                       [{el,
                         [{alt,id,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,name,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,status,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,attribute,'LabelAttribute',[],1,1,true,
                           undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'Label.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,'TextLabel'},
                      {type,'Bids',sequence,
                       [{el,
                         [{alt,'Bids.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'BiddingStrategyConfiguration',sequence,
                       [{el,
                         [{alt,biddingStrategyId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,biddingStrategyName,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,biddingStrategyType,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,biddingStrategySource,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,biddingScheme,'BiddingScheme',[],1,1,true,
                           undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,bids,'Bids',[],1,1,true,undefined}],
                         0,unbound,undefined,7},
                        {el,
                         [{alt,targetRoasOverride,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,8}],
                       [],undefined,undefined,8,1,1,undefined,undefined},
                      {type,'BiddingScheme',sequence,
                       [{el,
                         [{alt,'BiddingScheme.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'BiddingErrors',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'BiddingErrors'},
                      {type,'AuthorizationError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'AuthorizationError'},
                      {type,'AuthenticationError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'AuthenticationError'},
                      {type,'LabelAttribute',sequence,
                       [{el,
                         [{alt,'LabelAttribute.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'ApplicationException',sequence,
                       [{el,
                         [{alt,message,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'ApplicationException.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'ApiException',sequence,
                       [{el,
                         [{alt,message,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'ApplicationException.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,errors,'ApiError',[],1,1,true,undefined}],
                         0,unbound,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,'ApiException'},
                      {type,'ApiError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6}],
                       [],undefined,undefined,6,1,1,undefined,undefined},
                      {type,'AdxError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,'AdxError'},
                      {type,'AdGroupServiceError',sequence,
                       [{el,
                         [{alt,fieldPath,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,fieldPathElements,'FieldPathElement',[],1,1,
                           true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,trigger,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,errorString,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,'ApiError.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,reason,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,7}],
                       [],undefined,undefined,7,1,1,undefined,
                       'AdGroupServiceError'},
                      {type,'AdGroupReturnValue',sequence,
                       [{el,
                         [{alt,'ListReturnValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,value,'AdGroup',[],1,1,true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,partialFailureErrors,'ApiError',[],1,1,true,
                           undefined}],
                         0,unbound,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'AdGroupReturnValue'},
                      {type,'AdGroupPage',sequence,
                       [{el,
                         [{alt,totalNumEntries,
                           {'#PCDATA',integer},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'Page.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,entries,'AdGroup',[],1,1,true,undefined}],
                         0,unbound,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,'AdGroupPage'},
                      {type,'AdGroupOperation',sequence,
                       [{el,
                         [{alt,operator,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'Operation.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,operand,'AdGroup',[],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'AdGroupOperation'},
                      {type,'AdGroupLabelReturnValue',sequence,
                       [{el,
                         [{alt,'ListReturnValue.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,value,'AdGroupLabel',[],1,1,true,undefined}],
                         0,unbound,undefined,3},
                        {el,
                         [{alt,partialFailureErrors,'ApiError',[],1,1,true,
                           undefined}],
                         0,unbound,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'AdGroupLabelReturnValue'},
                      {type,'AdGroupLabelOperation',sequence,
                       [{el,
                         [{alt,operator,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,'Operation.Type',
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,operand,'AdGroupLabel',[],1,1,true,undefined}],
                         0,1,undefined,4}],
                       [],undefined,undefined,4,1,1,undefined,
                       'AdGroupLabelOperation'},
                      {type,'AdGroupLabel',sequence,
                       [{el,
                         [{alt,adGroupId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,labelId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3}],
                       [],undefined,undefined,3,1,1,undefined,undefined},
                      {type,'AdGroupAdRotationMode',sequence,
                       [{el,
                         [{alt,adRotationMode,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,2}],
                       [],undefined,undefined,2,1,1,undefined,undefined},
                      {type,'AdGroup',sequence,
                       [{el,
                         [{alt,id,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,2},
                        {el,
                         [{alt,campaignId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,3},
                        {el,
                         [{alt,campaignName,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,4},
                        {el,
                         [{alt,name,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,5},
                        {el,
                         [{alt,status,{'#PCDATA',char},[],1,1,true,undefined}],
                         0,1,undefined,6},
                        {el,
                         [{alt,settings,'Setting',[],1,1,true,undefined}],
                         0,unbound,undefined,7},
                        {el,
                         [{alt,labels,'Label',[],1,1,true,undefined}],
                         0,unbound,undefined,8},
                        {el,
                         [{alt,forwardCompatibilityMap,
                           'String_StringMapEntry',[],1,1,true,undefined}],
                         0,unbound,undefined,9},
                        {el,
                         [{alt,biddingStrategyConfiguration,
                           'BiddingStrategyConfiguration',[],1,1,true,
                           undefined}],
                         0,1,undefined,10},
                        {el,
                         [{alt,contentBidCriterionTypeGroup,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,11},
                        {el,
                         [{alt,baseCampaignId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,12},
                        {el,
                         [{alt,baseAdGroupId,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,13},
                        {el,
                         [{alt,trackingUrlTemplate,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,14},
                        {el,
                         [{alt,finalUrlSuffix,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,15},
                        {el,
                         [{alt,urlCustomParameters,'CustomParameters',[],1,1,
                           true,undefined}],
                         0,1,undefined,16},
                        {el,
                         [{alt,adGroupType,
                           {'#PCDATA',char},
                           [],1,1,true,undefined}],
                         0,1,undefined,17},
                        {el,
                         [{alt,adGroupAdRotationMode,'AdGroupAdRotationMode',
                           [],1,1,true,undefined}],
                         0,1,undefined,18}],
                       [],undefined,undefined,18,1,1,undefined,undefined}],
                     [{ns,"http://www.w3.org/2001/XMLSchema","xsd",qualified},
                      {ns,
                       "https://adwords.google.com/api/adwords/cm/v201809",
                       undefined,qualified}],
                     "https://adwords.google.com/api/adwords/cm/v201809",
                     [{'UrlError','ApiError'},
                      {'TargetingSetting','Setting'},
                      {'TargetSpendBiddingScheme','BiddingScheme'},
                      {'TargetRoasBiddingScheme','BiddingScheme'},
                      {'TargetOutrankShareBiddingScheme','BiddingScheme'},
                      {'TargetCpaBiddingScheme','BiddingScheme'},
                      {'StringLengthError','ApiError'},
                      {'StringFormatError','ApiError'},
                      {'StatsQueryError','ApiError'},
                      {'SizeLimitError','ApiError'},
                      {'SettingError','ApiError'},
                      {'SelectorError','ApiError'},
                      {'RequiredError','ApiError'},
                      {'RequestError','ApiError'},
                      {'RejectedError','ApiError'},
                      {'ReadOnlyError','ApiError'},
                      {'RateExceededError','ApiError'},
                      {'RangeError','ApiError'},
                      {'QuotaCheckError','ApiError'},
                      {'QueryError','ApiError'},
                      {'PageOnePromotedBiddingScheme','BiddingScheme'},
                      {'OperatorError','ApiError'},
                      {'OperationAccessDenied','ApiError'},
                      {'NumberValue','ComparableValue'},
                      {'NullError','ApiError'},
                      {'NotEmptyError','ApiError'},
                      {'NewEntityCreationError','ApiError'},
                      {'MultiplierError','ApiError'},
                      {'Money','ComparableValue'},
                      {'MaximizeConversionsBiddingScheme','BiddingScheme'},
                      {'MaximizeConversionValueBiddingScheme','BiddingScheme'},
                      {'ManualCpmBiddingScheme','BiddingScheme'},
                      {'ManualCpcBiddingScheme','BiddingScheme'},
                      {'LongValue','NumberValue'},
                      {'InternalApiError','ApiError'},
                      {'IdError','ApiError'},
                      {'ForwardCompatibilityError','ApiError'},
                      {'ExplorerAutoOptimizerSetting','Setting'},
                      {'EntityNotFound','ApiError'},
                      {'EntityCountLimitExceeded','ApiError'},
                      {'EntityAccessDenied','ApiError'},
                      {'DoubleValue','NumberValue'},
                      {'DistinctError','ApiError'},
                      {'DateError','ApiError'},
                      {'DatabaseError','ApiError'},
                      {'CpmBid','Bids'},
                      {'CpcBid','Bids'},
                      {'CpaBid','Bids'},
                      {'ClientTermsError','ApiError'},
                      {'DisplayAttribute','LabelAttribute'},
                      {'TextLabel','Label'},
                      {'BiddingErrors','ApiError'},
                      {'AuthorizationError','ApiError'},
                      {'AuthenticationError','ApiError'},
                      {'ApiException','ApplicationException'},
                      {'AdxError','ApiError'},
                      {'AdGroupServiceError','ApiError'},
                      {'AdGroupReturnValue','ListReturnValue'},
                      {'AdGroupPage','Page'},
                      {'AdGroupOperation','Operation'},
                      {'AdGroupLabelReturnValue','ListReturnValue'},
                      {'AdGroupLabelOperation','Operation'}],
                     false,skip},
                    1,undefined,
                    [{"https://adwords.google.com/api/adwords/cm/v201809",
                      undefined}]}).
